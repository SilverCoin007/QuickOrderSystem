@using QuickOrderSystemAdminApp.Data;
@using QuickOrderSystemClassLibrary.Enum;
@using QuickOrderSystemClassLibrary;
@using QuickOrderSystemClassLibrary.Services
@using QuickOrderSystemClassLibrary.Services.Api
@inject PopUpService PopUpService

<div class="container">
    @if (CrudType != CrudTyp.Delete)
    {
        <div class="form-group custom-input">
            <label for="ID">ID</label>
            <input type="text"
                   class="form-control @(CrudType == CrudTyp.Read ? "read-only" : "")"
                   id="ID"
            @bind="QrCodeModel.Id"
                   readonly="@(CrudType == CrudTyp.Read)">
        </div>
        <div class="form-group custom-input">
            <label for="TableNumber">TableNumber</label>
            <input type="text"
                   class="form-control @(CrudType == CrudTyp.Read ? "read-only" : "")"
                   id="ID"
            @bind="QrCodeModel.TableNumber"
                   readonly="@(CrudType == CrudTyp.Read)">
        </div>
        <div class="form-group custom-input">
            <label for="Created">Created</label>
            <input type="text"
                   class="form-control @(CrudType == CrudTyp.Read ? "read-only" : "")"
                   id="ID"
            @bind="QrCodeModel.Created"
                   readonly="@(CrudType == CrudTyp.Read)">
        </div>
        <div class="form-group custom-input">
            <label for="ImageData">ImageData</label>
            <input type="text"
                   class="form-control @(CrudType == CrudTyp.Read ? "read-only" : "")"
                   id="ID"
            @bind="QrCodeModel.ImageData"
                   readonly="@(CrudType == CrudTyp.Read)">
        </div>
        <div class="form-group custom-input">
            <label for="Url">Url</label>
            <input type="text"
                   class="form-control @(CrudType == CrudTyp.Read ? "read-only" : "")"
                   id="ID"
            @bind="QrCodeModel.Url"
                   readonly="@(CrudType == CrudTyp.Read)">
        </div>
    }

    <div class="button-group">
        @switch (CrudType)
        {
            case CrudTyp.Create:
                <button class="btn btn-red" @onclick="@ClosePopup">Cancel</button>
                <button class="btn btn-green" @onclick="@HandleSave">Create</button>
                break;
            case CrudTyp.Read:
                <button class="btn btn-red" @onclick="@ShowDeleteConfirmation">Delete</button>
                <button class="btn btn-green" @onclick="@SwitchToEditMode">Edit</button>
                break;
            case CrudTyp.Update:
                <button class="btn btn-red" @onclick="@ClosePopup">Cancel</button>
                <button class="btn btn-green" @onclick="@HandleSave">Edit</button>
                break;
            case CrudTyp.Delete:
                <div class="delete-confirmation">
                    <p>Are you sure you want to delete this entry?</p>
                    <div>
                        <button class="btn btn-green" @onclick="@ClosePopup">No</button>
                        <button class="btn btn-red" @onclick="@HandleDelete">Yes</button>
                    </div>
                </div>
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
    </div>
</div>

@code {
    [Parameter] public CrudTyp CrudType { get; set; }
    [Parameter] public QrCode QrCodeModel { get; set; }

    private QrCodeService qrCodeService;
    private GenerateQRCode qrCodeGenerator = new GenerateQRCode();

    protected override async Task OnInitializedAsync()
    {
        qrCodeService = new QrCodeService("https://localhost:7278/api");
    }

    private async Task SwitchToEditMode()
    {
        // Aktualisieren Sie die Daten für das aktuelle Produkt
        QrCodeModel = await qrCodeService.GetByIdAsyncTask(QrCodeModel.Id);
        CrudType = CrudTyp.Update;
        StateHasChanged(); // Aktualisieren der UI
    }

    private async Task ShowDeleteConfirmation()
    {
        // Aktualisieren Sie die Daten für das aktuelle Produkt
        QrCodeModel = await qrCodeService.GetByIdAsyncTask(QrCodeModel.Id);
        CrudType = CrudTyp.Delete;
        StateHasChanged(); // Aktualisieren der UI
    }

    private async Task HandleSave()
    {
        if (CrudType == CrudTyp.Create || CrudType == CrudTyp.Update)
        {
            // Generiere neuen QR-Code
            QrCodeModel.ImageData = qrCodeGenerator.GenerateQRCodeAsBase64String(QrCodeModel.Url);

            if (CrudType == CrudTyp.Create)
            {
                await qrCodeService.CreateAsyncTask(QrCodeModel);
            }
            else if (CrudType == CrudTyp.Update)
            {
                await qrCodeService.UpdateAsyncTask(QrCodeModel.Id, QrCodeModel);
            }
        }

        ClosePopup();
    }

    private async Task HandleDelete()
    {
        if (CrudType == CrudTyp.Delete)
        {
            await qrCodeService.DeleteAsyncTask(QrCodeModel.Id);
        }

        ClosePopup();
    }

    private void ClosePopup()
    {
        PopUpService.Close();
        NavigationManager.NavigateTo("QR-Code");
    }

    [Inject]
    private NavigationManager NavigationManager { get; set; }
}

<style>
    .custom-input .form-control {
        border: none;
        border-bottom: 1px solid #ccc;
        border-radius: 0;
        margin-bottom: 20px; /* Mehr Abstand zwischen den Eingabefeldern */
    }

    .button-group {
        position: sticky;
        bottom: 0;
        text-align: center;
        margin-top: 20px; /* Abstand zu den Textfeldern */
        margin-bottom: 20px; /* Abstand zu den Buttons hinzugefügt */
        display: flex;
        justify-content: space-between; /* Buttons nebeneinander */
    }

    .btn {
        width: 48%;
        height: 50px; /* Höher machen */
        border-radius: 5px; /* Weniger abgerundet */
    }

    .btn-green {
        background-color: green;
        color: white;
    }

    .btn-red {
        background-color: red;
        color: white;
    }

    .read-only {
        background: none !important;
        border: none !important;
        box-shadow: none !important;
    }

    .delete-confirmation {
        text-align: center;
    }

    label {
        font-weight: bold; /* oder einen numerischen Wert wie 600 oder 700 */
    }
</style>
