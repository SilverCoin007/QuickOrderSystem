@using QuickOrderSystemClassLibrary;
@using QuickOrderSystemClassLibrary.Enum;
@using QuickOrderSystemClassLibrary.Services
@using QuickOrderSystemClassLibrary.Services.Api
@using QuickOrderSystemAdminApp.Data
@inject PopUpService PopupService

@page "/QR-Code"
<table class="table">
    <thead>
        <tr>
            <th>QR-Code</th>
            <th>Table Nr.</th>
        </tr>
    </thead>
    <tbody>
        @if (_qrCode == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            foreach (var item in _qrCode)
            {
                <tr @onclick="(() => ShowCustomPopup(CrudTyp.Read, item))">
                    <td>
                        @if (!string.IsNullOrEmpty(item.ImageData))
                        {
                            <img src="data:image/png;base64,@item.ImageData" width="100" height="100" />
                        }
                        else
                        {
                            <span>No image available</span>
                        }
                    </td>
                    <td>@item.TableNumber</td>
                </tr>
            }
        }
    </tbody>
</table>
<button @onclick="(() => ShowCustomPopup(CrudTyp.Create))" class="add-button">
    Add
</button>

@code {
    private List<QrCode> _qrCode;
    private QrCodeService _qrCodeService;
    private UserIdService _userIdService;

    private void ShowCustomPopup(CrudTyp? crudType = null, QrCode qrCodeModel = null)
    {
        crudType ??= CrudTyp.Create;
        qrCodeModel ??= new QrCode();

        RenderFragment content = builder =>
        {
            builder.OpenComponent(0, typeof(CrudQrCode));
            builder.AddAttribute(1, "CrudType", crudType);
            builder.AddAttribute(2, "QrCodeModel", qrCodeModel);
            builder.CloseComponent();
        };

        PopupService.Show(content);
    }

    protected override async Task OnParametersSetAsync()
    {
        _userIdService = new UserIdService();
        _qrCodeService = new QrCodeService("https://localhost:7278/api", UserIdService.UserId.Value);
        _qrCode = await _qrCodeService.GetAllAsyncTask();
    }

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += HandleLocationChanged;
    }

    private async void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        if (NavigationManager.Uri.EndsWith("/QR-Code"))
        {
            _userIdService = new UserIdService();
            _qrCodeService = new QrCodeService("https://localhost:7278/api", UserIdService.UserId.Value);
            _qrCode = await _qrCodeService.GetAllAsyncTask();
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }
    [Inject]
    private NavigationManager NavigationManager { get; set; }
}

<style>
    .add-button {
        width: 100%;
        text-align: center;
        border: none;
        border-radius: 12px;
    }
</style>
