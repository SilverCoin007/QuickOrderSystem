@using QuickOrderSystemClassLibrary.Enum
@using QuickOrderSystemAdminApp.Data
@using QuickOrderSystemClassLibrary
@using QuickOrderSystemClassLibrary.Services.Api
@using System.IO
@using QuickOrderSystemClassLibrary.Services
@inject PopUpService PopUpService

<div class="container">
    @if (CrudType != CrudTyp.Delete)
    {
        <div class="form-group custom-input">
            <label for="image">Image</label>

            @if (CrudType == CrudTyp.Create || CrudType == CrudTyp.Update)
            {
                <div class="form-group custom-input">
                    <div class="upload-button-wrapper">
                        <button class="upload-button">Upload</button>
                        <InputFile OnChange="OnChange" accept="image/png, image/jpeg, image/gif" />
                    </div>
                </div>
            }

            @if (!string.IsNullOrEmpty(_imageSizeErrorMessage))
            {
                <div>@_imageSizeErrorMessage</div>
            }
            else if (!string.IsNullOrEmpty(CategoryModel.ImageData))
            {
                <div>
                    <img class="Image-to-upload" src="data:image/png;base64,@CategoryModel.ImageData" />
                </div>
            }
            else
            {
                <div>No image available</div>
            }
        </div>
        <div class="form-group custom-input">
            <label for="name">Name</label>
            <input type="text"
                   class="form-control @(CrudType == CrudTyp.Read ? "read-only" : "")"
                   id="ID"
            @bind="CategoryModel.Name"
                   readonly="@(CrudType == CrudTyp.Read)">
        </div>
    }

    <div class="button-group">
        @switch (CrudType)
        {
            case CrudTyp.Create:
                <button class="btn btn-red" @onclick="@ClosePopup">Cancel</button>
                <button class="btn btn-green" @onclick="@HandleSave">Create</button>
                break;
            case CrudTyp.Read:
                <button class="btn btn-red" @onclick="@ShowDeleteConfirmation">Delete</button>
                <button class="btn btn-green" @onclick="@SwitchToEditMode">Edit</button>
                break;
            case CrudTyp.Update:
                <button class="btn btn-red" @onclick="@ClosePopup">Cancel</button>
                <button class="btn btn-green" @onclick="@HandleSave">Apply</button>
                break;
            case CrudTyp.Delete:
                <div class="delete-confirmation">
                    <p>Are you sure you want to delete this entry?</p>
                    <div>
                        <button class="btn btn-green" @onclick="@ClosePopup">No</button>
                        <button class="btn btn-red" @onclick="@HandleDelete">Yes</button>
                    </div>
                </div>
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
    </div>
</div>

@code {
    [Parameter] public CrudTyp CrudType { get; set; }
    [Parameter] public Category CategoryModel { get; set; }
    private UserIdService _userIdService;
    private CategoryService _categoryService;
    private string _imageSizeErrorMessage = null;

    protected override async Task OnInitializedAsync()
    {
        _userIdService = new UserIdService();
        _categoryService = new CategoryService("https://localhost:7278/api", UserIdService.UserId.Value);
    }

    async Task OnChange(InputFileChangeEventArgs e)
    {
        var file = e.File;

        const int maxSizeInMb = 5;
        var maxSizeInBytes = maxSizeInMb * 1024 * 1024;

        if (file.Size > maxSizeInBytes)
        {
            _imageSizeErrorMessage = $"Die Datei ist zu groß. Bitte laden Sie eine Datei hoch, die kleiner als {maxSizeInMb} MB ist.";
            return;
        }

        using var memoryStream = new MemoryStream();
        await file.OpenReadStream(maxSizeInBytes).CopyToAsync(memoryStream);
        var base64Image = Convert.ToBase64String(memoryStream.ToArray());

        CategoryModel.ImageData = base64Image;
        _imageSizeErrorMessage = null;
    }

    private async Task SwitchToEditMode()
    {
        CategoryModel = await _categoryService.GetByIdAsyncTask(CategoryModel.Id);
        CrudType = CrudTyp.Update;
        StateHasChanged();
    }

    private async Task ShowDeleteConfirmation()
    {
        CategoryModel = await _categoryService.GetByIdAsyncTask(CategoryModel.Id);
        CrudType = CrudTyp.Delete;
        StateHasChanged();
    }

    private async Task HandleSave()
    {
        if (CrudType == CrudTyp.Create)
        {
            await _categoryService.CreateAsyncTask(CategoryModel);
        }
        else if (CrudType == CrudTyp.Update)
        {
            await _categoryService.UpdateAsyncTask(CategoryModel.Id, CategoryModel);
        }

        ClosePopup();
    }

    private async Task HandleDelete()
    {
        if (CrudType == CrudTyp.Delete)
        {
            await _categoryService.DeleteAsyncTask(CategoryModel.Id);
        }

        ClosePopup();
    }

    private void ClosePopup()
    {
        PopUpService.Close();
        NavigationManager.NavigateTo("/Dishes");
    }

    [Inject]
    private NavigationManager NavigationManager { get; set; }
}

<style>
    .upload-button {
        background-color: #F59D07 !important;
        border: none !important;
        box-shadow: none !important;
    }

    .custom-input .form-control {
        border: none;
        border-bottom: 1px solid #ccc;
        border-radius: 0;
        margin-bottom: 20px;
    }

    .btn {
        width: 48%;
        height: 50px;
        border-radius: 5px;
    }

    .btn-green {
        background-color: green;
        color: white;
    }

    .btn-red {
        background-color: red;
        color: white;
    }

    .read-only {
        background: none !important;
        border: none !important;
        box-shadow: none !important;
    }

    .delete-confirmation {
        text-align: center;
    }

    label {
        font-weight: bold;
    }

    .container {
        position: relative;  /* Damit das Schließkreuz sich relativ zu diesem Container positioniert */
    }

    .button-group {
        text-align: center;
        margin-top: 20px;
        margin-bottom: 20px;
        display: flex;
        justify-content: space-between;
    }

    .upload-button-wrapper {
        position: relative;
        overflow: hidden;
        display: inline-block;
    }

    .upload-button {
        background-color: #F59D07;
        border: none;
        border-radius: 10px;
        padding: 8px 12px;
        color: white;
        text-align: center;
        cursor: pointer;
        width: 100%;
        height: 100%;
    }

    .Image-to-upload {
        width: 100%;
        max-width: 90%;
        max-height: 200px;
        margin-bottom: 20px;
        object-fit: cover;
    }

    .upload-button-wrapper input[type=file] {
        font-size: 100px;
        position: absolute;
        left: 0;
        top: 0;
        opacity: 0;
        cursor: pointer;
    }
</style>