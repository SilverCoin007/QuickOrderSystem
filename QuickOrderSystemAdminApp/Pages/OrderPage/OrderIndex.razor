@using QuickOrderSystemClassLibrary.Enum;
@using QuickOrderSystemClassLibrary.Services.Api
@using QuickOrderSystemClassLibrary;
@using QuickOrderSystemClassLibrary.Services;
@inject PopUpService PopupService
@inject NavigationManager NavigationManager

@page "/Order"
<table class="table">
    <table class="table">
        <thead>
            <tr>
                <th>TableNumber</th>
                <th>Created</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            @if (_order == null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                @foreach (var item in _order)
                {
                    <tr @onclick="(() => ShowCustomPopup(CrudTyp.Read, item))">
                        <td>@item.TableNumber</td>
                        <td>@item.Created</td>
                        <td>@item.Status</td>
                    </tr>
                }
            }
        </tbody>
    </table>
    <button @onclick="(() => ShowCustomPopup(CrudTyp.Create))" class="add-button">
        Add
    </button>
</table>

@code {
    private List<Order> _order;
    private OrderService _orderService;

    private void ShowCustomPopup(CrudTyp? crudType = null, Order orderModel = null)
    {
        crudType ??= CrudTyp.Create;
        orderModel ??= new Order();

        RenderFragment content = builder =>
        {
            builder.OpenComponent(0, typeof(CrudOrder));
            builder.AddAttribute(1, "CrudType", crudType);
            builder.AddAttribute(2, "OrderModel", orderModel);
            builder.CloseComponent();
        };

        PopupService.Show(content);
    }
    
    protected override async Task OnParametersSetAsync()
    {
        _orderService = new OrderService("https://localhost:7278/api");
        _order = await _orderService.GetAllAsyncTask();
    }

    private async void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        if (!NavigationManager.Uri.EndsWith("/Order")) return;
        _orderService = new OrderService("https://localhost:7278/api");
        _order = await _orderService.GetAllAsyncTask();
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += HandleLocationChanged;
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }
}

<style>
    .add-button {
        width: 100%;
        text-align: center;
        border: none;
        border-radius: 12px;
    }
</style>
