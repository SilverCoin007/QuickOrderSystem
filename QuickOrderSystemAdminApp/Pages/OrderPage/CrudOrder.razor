@using QuickOrderSystemClassLibrary.Enum;
@using QuickOrderSystemClassLibrary;
@using QuickOrderSystemClassLibrary.Services
@using QuickOrderSystemClassLibrary.Services.Api
@using QuickOrderSystemAdminApp.Data
@inject PopUpService PopUpService

<div class="popup-close" @onclick="ClosePopup">
    <div class="popup-close-line1"></div>
    <div class="popup-close-line2"></div>
</div>
<div class="container">
    @if (CrudType != CrudTyp.Delete)
    {
        <div class="form-group custom-input">
            <label for="TableNumber">TableNumber</label>
            <input type="text"
                   class="form-control @(CrudType == CrudTyp.Read ? "read-only" : "")"
                   id="ID"
            @bind="OrderModel.TableNumber"
                   readonly="@(CrudType == CrudTyp.Read)">
        </div>
        <div class="form-group custom-input">
            <label for="Status">Status</label>
            <input type="text"
                   class="form-control @(CrudType == CrudTyp.Read ? "read-only" : "")"
                   id="ID"
                   @bind="OrderModel.Status"
                   readonly="@(CrudType == CrudTyp.Read)">
        </div>
        <div class="form-group custom-input">
            <label for="Created">Created</label>
            <input type="text"
                   class="form-control @(CrudType == CrudTyp.Read ? "read-only" : "")"
                   id="ID"
                   @bind="OrderModel.Created"
                   readonly="@(CrudType == CrudTyp.Read)">
        </div>
        @if (CrudType == CrudTyp.Read)
        {
            <div class="order-items-section">
                <label>Order Items</label>
                @foreach (var item in OrderModel.OrderItems)
                {
                    <div class="order-item">
                        <span>@item.Quantity</span>
                        <span>@_productNames[item.ProductId]</span>
                    </div>
                }
            </div>
        }
    }

    <div class="button-group">
        @switch (CrudType)
        {
            case CrudTyp.Create:
                <button class="btn btn-red" @onclick="@ClosePopup">Cancel</button>
                <button class="btn btn-green" @onclick="@HandleSave">Create</button>
                break;
            case CrudTyp.Read:
                <button class="btn btn-red" @onclick="@ShowDeleteConfirmation">Delete</button>
                <button class="btn btn-green" @onclick="@SwitchToEditMode">Edit</button>
                break;
            case CrudTyp.Update:
                <button class="btn btn-red" @onclick="@ClosePopup">Cancel</button>
                <button class="btn btn-green" @onclick="@HandleSave">Save</button>
                break;
            case CrudTyp.Delete:
                <div class="delete-confirmation">
                    <p>Are you sure you want to delete this entry?</p>
                    <div>
                        <button class="btn btn-green" @onclick="@ClosePopup">No</button>
                        <button class="btn btn-red" @onclick="@HandleDelete">Yes</button>
                    </div>
                </div>
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
    </div>
</div>

@code {
    [Parameter] public CrudTyp CrudType { get; set; }
    [Parameter] public Order OrderModel { get; set; }
    private OrderService _orderService;
    private OrderItemService _orderItemService;
    private ProductService _productService;
    private readonly Dictionary<int, string> _productNames = new Dictionary<int, string>();

    protected override async Task OnInitializedAsync()
    {
        if (UserIdService.UserId != null)
        {
            _orderService = new OrderService("https://localhost:7278/api", UserIdService.UserId.Value); 
            _orderItemService = new OrderItemService("https://localhost:7278/api", UserIdService.UserId.Value);
            _productService = new ProductService("https://localhost:7278/api", UserIdService.UserId.Value);
            
            if(OrderModel != null && OrderModel.Id != 0)
            {
                var orderItems = await _orderItemService.GetAllByOrderIdAsyncTask(OrderModel.Id);
                OrderModel.OrderItems = orderItems.ToList();

                foreach(var item in OrderModel.OrderItems)
                {
                    var product = await _productService.GetByIdAsyncTask(item.ProductId);
                    _productNames[item.ProductId] = product.Name;
                }
            }
        }
    }

    private async Task SwitchToEditMode()
    {
        OrderModel = await _orderService.GetByIdAsyncTask(OrderModel.Id);
        CrudType = CrudTyp.Update;
        StateHasChanged();
    }

    private async Task ShowDeleteConfirmation()
    {
        OrderModel = await _orderService.GetByIdAsyncTask(OrderModel.Id);
        CrudType = CrudTyp.Delete;
        StateHasChanged();
    }

    private async Task HandleSave()
    {
        if (CrudType == CrudTyp.Create)
        {
            await _orderService.CreateAsyncTask(OrderModel);
        }
        else if (CrudType == CrudTyp.Update)
        {
            await _orderService.UpdateAsyncTask(OrderModel.Id, OrderModel);
        }

        ClosePopup();
    }

    private async Task HandleDelete()
    {
        if (CrudType == CrudTyp.Delete)
        {
            await _orderService.DeleteAsyncTask(OrderModel.Id);
        }

        ClosePopup();
    }

    private void ClosePopup()
    {
        PopUpService.Close();
        NavigationManager.NavigateTo("Order");
    }

    [Inject]
    private NavigationManager NavigationManager { get; set; }
}

<style>
    .order-items-section {
          margin-top: 20px;
      }

    .order-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-bottom: 1px solid #ccc;
        padding: 10px 0;
    }

    .popup-close-line1 {
        transform: translate(-50%, -50%) rotate(45deg);
    }

    .popup-close-line2 {
        transform: translate(-50%, -50%) rotate(-45deg);
    }

    .custom-input .form-control {
        border: none;
        border-bottom: 1px solid #ccc;
        border-radius: 0;
        margin-bottom: 20px;
    }

    .button-group {
        position: sticky;
        bottom: 0;
        text-align: center;
        margin-top: 20px;
        margin-bottom: 20px;
        display: flex;
        justify-content: space-between;
    }

    .btn {
        width: 48%;
        height: 50px;
        border-radius: 5px;
    }

    .btn-green {
        background-color: green;
        color: white;
    }

    .btn-red {
        background-color: red;
        color: white;
    }

    .read-only {
        background: none !important;
        border: none !important;
        box-shadow: none !important;
    }

    .delete-confirmation {
        text-align: center;
    }

    label {
        font-weight: bold;
    }
</style>
