@if (IsOpen)
{
    <div class="popup-overlay">
        <div class="popup-content">
            <div class="popup-close" @onclick="ClosePopup">
                <div class="popup-close-line1"></div>
                <div class="popup-close-line2"></div>
            </div>
            @PopupContent
        </div>
    </div>
}

@code {
    [Parameter] public RenderFragment PopupContent { get; set; }
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public EventCallback<bool> IsOpenChanged { get; set; }

    private void ClosePopup()
    {
        IsOpen = false;
        IsOpenChanged.InvokeAsync(IsOpen);
    }
}

<style>
    .popup-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,0.7);
        z-index: 999999;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .popup-content {
        position: relative;
        padding: 20px;
        background-color: #fff;
        width: 80%;
        max-height: 80vh;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        border-radius: 10px;
        overflow-y: auto;
    }

    .popup-content::-webkit-scrollbar {
        display: none;
    }

    .popup-close {
        position: absolute;
        top: 10px;
        right: 10px;
        width: 24px;
        height: 24px;
        cursor: pointer;
        z-index: 1000;
    }

    .popup-close-line1,
    .popup-close-line2 {
        position: absolute;
        top: 50%;
        left: 50%;
        width: 100%;
        height: 4px;
        background-color: #444242;
        border-radius: 2px;
    }

    .popup-close-line1 {
        transform: translate(-50%, -50%) rotate(45deg);
    }

    .popup-close-line2 {
        transform: translate(-50%, -50%) rotate(-45deg);
    }
</style>